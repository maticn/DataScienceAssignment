preProcess=c('scale', 'center'))
lr_pred_all <- predict(lr_model_all, testData[,-14])
confusionMatrix(table(lr_pred_all, testData$Class))
lr_model_all <- train(Class~., data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_all <- predict(lr_model_all, testData[,-14])
confusionMatrix(table(lr_pred_all, testData$Class))
lr_model_all
confusionMatrix(table(lr_pred_all, testData$Class))
lr_model_corr <- train(Class ~ rad + nox,
data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_model_corr
LDA_model_all <- train(Class~., data=trainingData,
method='lda',
preProcess=c('scale', 'center'))
LDA_model_all
LDA_pred_all <- predict(LDA_model_all, testData[,-14])
confusionMatrix(LDA_pred_all, testData$Class)
LDA_model_corr <- train(Class~., data=trainingDataCorr,
method='lda',
preProcess=c('scale', 'center'))
LDA_model_corr
LDA_pred_corr <- predict(LDA_model_corr, testDataCorr[,-12])
confusionMatrix(LDA_pred_corr, testDataCorr$Class)
lr_pred_corr <- predict(logit, testData[,-14])
confusionMatrix(lr_pred_corr, testData$Class)
lr_model_corr <- train(Class ~ rad + nox,
data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_corr <- predict(logit, testData[,-14])
confusionMatrix(lr_pred_corr, testData$Class)
lr_model_all <- train(Class~., data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_all <- predict(lr_model_all, testData[,-14])
knnGrid <- expand.grid(.k=c(2))
knn_model_all <- train(x=trainingData[,-14], method='knn',
y=trainingData$Class,
preProcess=c('center', 'scale'),
tuneGrid = knnGrid)
knn_model_all
knn_model_corr <- train(x=trainingDataCorr[,-12], method='knn',
y=trainingDataCorr$Class,
preProcess=c('center', 'scale'),
tuneGrid = knnGrid)
knn_pred <- predict(knn_model_all, testData[,-14])
confusionMatrix(table(knn_pred, testLabels))
knn_model_corr
library(ISLR)
library(caret)
library(car)
library(MASS)
set.seed(7)
data <- Boston
median_crim_rate <- median(data$crim)
classFromCrimRate <- function(x) {
if (x > median_crim_rate) return (1)
else return (0)
}
calculatedClass <- sapply(data$crim, classFromCrimRate)
data$Class <- calculatedClass
data$Class <- as.factor(data$Class)
data <- data[,-1]
nrow(data[data$Class == 1,])
TrainingDataIndex <- createDataPartition(data$Class, p=0.75, list=FALSE)
trainingData <- data[TrainingDataIndex,]
testData <- data[-TrainingDataIndex,]
trainingLabels <- trainingData$Class
testLabels <- testData$Class
testDataWithoutClass <- testData[,-14]
prop.table(table(trainingLabels))
nearZeroVariables <- nearZeroVar(trainingData, saveMetrics = TRUE)
correlations <- cor(trainingData[,-14])
highCorrelations <- findCorrelation(correlations, cutoff = 0.75)
trainingDataCorr <- trainingData[,-drop(c(4,9))]
testDataCorr <- testData[,-drop(c(4,9))]
testDataCorrWithoutClass <- testDataCorr[,-12]
lr_model_all <- train(Class~., data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_all <- predict(lr_model_all, testData[,-14])
confusionMatrix(table(lr_pred_all, testData$Class))
lr_model_corr <- train(Class ~ rad + nox,
data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_corr <- predict(logit, testData[,-14])
confusionMatrix(lr_pred_corr, testData$Class)
lr_model_all <- train(Class~., data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_all <- predict(lr_model_all, testData[,-14])
confusionMatrix(table(lr_pred_all, testData$Class))
lr_model_corr <- train(Class ~ rad + nox,
data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_corr <- predict(logit, testData[,-14])
lr_pred_corr <- predict(lr_model_corr, testData[,-14])
confusionMatrix(lr_pred_corr, testData$Class)
vif(logit$finalModel)
lr_model_corr <- train(Class ~ rad + nox,
data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_corr <- predict(lr_model_corr, testData[,-14])
confusionMatrix(lr_pred_corr, testData$Class)
vif(lr_model_corr$finalModel)
LDA_model_all <- train(Class~., data=trainingData,
method='lda',
preProcess=c('scale', 'center'))
LDA_pred_all <- predict(LDA_model_all, testData[,-14])
confusionMatrix(LDA_pred_all, testData$Class)
LDA_model_corr <- train(Class~., data=trainingDataCorr,
method='lda',
preProcess=c('scale', 'center'))
LDA_pred_corr <- predict(LDA_model_corr, testDataCorr[,-12])
confusionMatrix(LDA_pred_corr, testDataCorr$Class)
knnGrid <- expand.grid(.k=c(2))
knn_model_all <- train(x=trainingData[,-14], method='knn',
y=trainingData$Class,
preProcess=c('center', 'scale'),
tuneGrid = knnGrid)
knn_model_corr <- train(x=trainingDataCorr[,-12], method='knn',
y=trainingDataCorr$Class,
preProcess=c('center', 'scale'),
tuneGrid = knnGrid)
knn_pred <- predict(knn_model_all, testData[,-14])
confusionMatrix(table(knn_pred, testLabels))
set.seed(7)
data <- Boston
median_crim_rate <- median(data$crim)
classFromCrimRate <- function(x) {
if (x > median_crim_rate) return (1)
else return (0)
}
calculatedClass <- sapply(data$crim, classFromCrimRate)
data$Class <- calculatedClass
data$Class <- as.factor(data$Class)
data <- data[,-1]
nrow(data[data$Class == 1,])
TrainingDataIndex <- createDataPartition(data$Class, p=0.75, list=FALSE)
trainingData <- data[TrainingDataIndex,]
testData <- data[-TrainingDataIndex,]
trainingLabels <- trainingData$Class
testLabels <- testData$Class
testDataWithoutClass <- testData[,-14]
prop.table(table(trainingLabels))
nearZeroVariables <- nearZeroVar(trainingData, saveMetrics = TRUE)
correlations <- cor(trainingData[,-14])
highCorrelations <- findCorrelation(correlations, cutoff = 0.75)
nearZeroVariables
correlations
View(correlations)
highCorrelations
View(trainingData)
View(testData)
View(testData)
lr_model_all <- train(Class~., data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_all <- predict(lr_model_all, testData[,-14])
confusionMatrix(table(lr_pred_all, testData$Class))
lr_model_corr <- train(Class ~ rad + nox,
data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_model_all
summary(lr_model_all)
betasBac <- getBetas(lr_model_all)
getBetas <- function(logistic_model) {
betas <- c()
for (i in 1:length(logistic_model$coefficients)) {
betas <- c(betas, logistic_model$coefficients[i])
}
return (betas)
}
getOddsRatios <- function(betas) {
oddsRatios <- c()
for (i in 1:length(betas)) {
oddsRatios <- c(oddsRatios, exp(betas[i]))
}
return (oddsRatios)
}
getStandardErrors <- function(logistic_model) {
standardErrors <- c()
for (i in 1:length(summary(logistic_model)$coefficients[, 2])) {
standardErrors <- c(standardErrors, summary(logistic_model)$coefficients[, 2][i])
}
return (standardErrors)
}
getBounds <- function(oddsRatios, betas, standardErrors, confidence_number = 1.96) {
bounds <- data.frame()
for (i in 1:length(betas)) {
low_bound <- exp(betas[i] - confidence_number * standardErrors[i])
high_bound <- exp(betas[i] + confidence_number * standardErrors[i])
entry <- data.frame(OR = oddsRatios[i], LB = low_bound, HB = high_bound, beta = betas[i], SE = standardErrors[i])
bounds <- rbind(bounds, entry)
}
return (bounds)
}
plotBounds <- function(bounds, numf_of_columns_from_bounds = 3) {
zeros <- rep(0, numf_of_columns_from_bounds)
num_of_plots <- nrow(bounds)
attach(mtcars)
par(mfrow=c(num_of_plots, 1)) # number of rows and columns on the same graph
for (i in 1:nrow(bounds)) {
dots <- as.numeric(bounds[i,1:numf_of_columns_from_bounds])
plot(dots, zeros, main=rownames(bounds)[i])
#boxplot(dots)
}
}
forestPlot <- function(df, boxLabels, yAxis, modelTitle) {
#dev.off()
p <- ggplot(df, aes(x = boxOdds, y = yAxis))
p + geom_vline(aes(xintercept = 1), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = boxCIHigh, xmin = boxCILow), size = .5, height = .2, color = "gray50") +
geom_point(size = 3.5, color = "orange") +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(breaks = yAxis, labels = boxLabels) +
scale_x_continuous(breaks = seq(0,270,10) ) +
#coord_trans(x = "log10") +
ylab("") +
xlab("Odds ratio (log scale)") +
#annotate(geom = "text", y =1.1, x = 3.5, label ="Model p < 0.001\nPseudo R^2 = 0.10", size = 3.5, hjust = 0) +
ggtitle(modelTitle)
}
betasBac <- getBetas(lr_model_all)
oddsRatiosBac <- getOddsRatios(betasBac)
correlations
View(correlations)
betasBac <- getBetas(summary(lr_model_all))
oddsRatiosBac <- getOddsRatios(betasBac)
standardErrorsBac <- getStandardErrors(lmBac)
standardErrorsBac <- getStandardErrors(summary(lr_model_all))
boundsBac <- getBounds(oddsRatiosBac, betasBac, standardErrorsBac)
standardErrorsBac <- getStandardErrors(lr_model_all)
boundsBac <- getBounds(oddsRatiosBac, betasBac, standardErrorsBac)
plotBounds(boundsBac)
library(ISLR)
library(caret)
library(car)
library(MASS)
set.seed(7)
data <- Boston
median_crim_rate <- median(data$crim)
classFromCrimRate <- function(x) {
if (x > median_crim_rate) return (1)
else return (0)
}
calculatedClass <- sapply(data$crim, classFromCrimRate)
data$Class <- calculatedClass
data$Class <- as.factor(data$Class)
data <- data[,-1]
nrow(data[data$Class == 1,])
TrainingDataIndex <- createDataPartition(data$Class, p=0.75, list=FALSE)
trainingData <- data[TrainingDataIndex,]
testData <- data[-TrainingDataIndex,]
trainingLabels <- trainingData$Class
testLabels <- testData$Class
testDataWithoutClass <- testData[,-14]
prop.table(table(trainingLabels))
nearZeroVariables <- nearZeroVar(trainingData, saveMetrics = TRUE)
correlations <- cor(trainingData[,-14])
highCorrelations <- findCorrelation(correlations, cutoff = 0.75)
trainingDataCorr <- trainingData[,-drop(c(4,9))]
testDataCorr <- testData[,-drop(c(4,9))]
testDataCorrWithoutClass <- testDataCorr[,-12]
lr_model_all <- train(Class~., data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_all <- predict(lr_model_all, testData[,-14])
confusionMatrix(table(lr_pred_all, testData$Class))
betasBac <- getBetas(summary(lr_model_all))
getBetas <- function(logistic_model) {
betas <- c()
for (i in 1:length(logistic_model$coefficients)) {
betas <- c(betas, logistic_model$coefficients[i])
}
return (betas)
}
getOddsRatios <- function(betas) {
oddsRatios <- c()
for (i in 1:length(betas)) {
oddsRatios <- c(oddsRatios, exp(betas[i]))
}
return (oddsRatios)
}
getStandardErrors <- function(logistic_model) {
standardErrors <- c()
for (i in 1:length(summary(logistic_model)$coefficients[, 2])) {
standardErrors <- c(standardErrors, summary(logistic_model)$coefficients[, 2][i])
}
return (standardErrors)
}
getBounds <- function(oddsRatios, betas, standardErrors, confidence_number = 1.96) {
bounds <- data.frame()
for (i in 1:length(betas)) {
low_bound <- exp(betas[i] - confidence_number * standardErrors[i])
high_bound <- exp(betas[i] + confidence_number * standardErrors[i])
entry <- data.frame(OR = oddsRatios[i], LB = low_bound, HB = high_bound, beta = betas[i], SE = standardErrors[i])
bounds <- rbind(bounds, entry)
}
return (bounds)
}
plotBounds <- function(bounds, numf_of_columns_from_bounds = 3) {
zeros <- rep(0, numf_of_columns_from_bounds)
num_of_plots <- nrow(bounds)
attach(mtcars)
par(mfrow=c(num_of_plots, 1)) # number of rows and columns on the same graph
for (i in 1:nrow(bounds)) {
dots <- as.numeric(bounds[i,1:numf_of_columns_from_bounds])
plot(dots, zeros, main=rownames(bounds)[i])
#boxplot(dots)
}
}
forestPlot <- function(df, boxLabels, yAxis, modelTitle) {
#dev.off()
p <- ggplot(df, aes(x = boxOdds, y = yAxis))
p + geom_vline(aes(xintercept = 1), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = boxCIHigh, xmin = boxCILow), size = .5, height = .2, color = "gray50") +
geom_point(size = 3.5, color = "orange") +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(breaks = yAxis, labels = boxLabels) +
scale_x_continuous(breaks = seq(0,270,10) ) +
#coord_trans(x = "log10") +
ylab("") +
xlab("Odds ratio (log scale)") +
#annotate(geom = "text", y =1.1, x = 3.5, label ="Model p < 0.001\nPseudo R^2 = 0.10", size = 3.5, hjust = 0) +
ggtitle(modelTitle)
}
betasBac <- getBetas(summary(lr_model_all))
oddsRatiosBac <- getOddsRatios(betasBac)
standardErrorsBac <- getStandardErrors(lr_model_all)
boundsBac <- getBounds(oddsRatiosBac, betasBac, standardErrorsBac)
len(betasBac)
length(betasBac)
length(oddsRatiosBac)
length(standardErrorsBac)
summary(lr_model_all)
lmBac <- glm(Class ~., family=binomial(logit), data=data)
summary(lmBac)
betasBac <- getBetas(lmBac)
oddsRatiosBac <- getOddsRatios(betasBac)
standardErrorsBac <- getStandardErrors(lmBac)
boundsBac <- getBounds(oddsRatiosBac, betasBac, standardErrorsBac)
plotBounds(boundsBac)
View(data)
forestPlot <- function(df, boxLabels, yAxis, modelTitle) {
#dev.off()
p <- ggplot(df, aes(x = boxOdds, y = yAxis))
p + geom_vline(aes(xintercept = 1), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = boxCIHigh, xmin = boxCILow), size = .5, height = .2, color = "gray50") +
geom_point(size = 3.5, color = "orange") +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(breaks = yAxis, labels = boxLabels) +
scale_x_continuous(breaks = seq(0,270,10) ) +
#coord_trans(x = "log10") +
ylab("") +
xlab("Odds ratio (log scale)") +
#annotate(geom = "text", y =1.1, x = 3.5, label ="Model p < 0.001\nPseudo R^2 = 0.10", size = 3.5, hjust = 0) +
ggtitle(modelTitle)
}
dev.off()
boxLabels = c("zn", "indus", "chas", "nox", "rm", "age", "dis", "rad", "tax", "ptratio", "black", "lstat", "medv")
yAxis = length(boxLabels):1
df <- data.frame(
yAxis = length(boxLabels):1,
boxOdds = c(boundsAdj[2,1],boundsAdj[3,1],boundsAdj[4,1],boundsAdj[5,1],boundsAdj[6,1],boundsAdj[7,1],boundsAdj[8,1],boundsAdj[9,1],boundsAdj[10,1],boundsAdj[11,1],boundsAdj[12,1],boundsAdj[13,1],boundsAdj[14,1]),
boxCILow = c(boundsAdj[2,2],boundsAdj[3,2],boundsAdj[4,2],boundsAdj[5,2],boundsAdj[6,2],boundsAdj[7,2],boundsAdj[8,2],boundsAdj[9,2],boundsAdj[10,2],boundsAdj[11,2],boundsAdj[12,2],boundsAdj[13,2],boundsAdj[14,2]),
boxCIHigh = c(boundsAdj[2,3],boundsAdj[3,3],boundsAdj[4,3],boundsAdj[5,3],boundsAdj[6,3],boundsAdj[7,3],boundsAdj[8,3],boundsAdj[9,3],boundsAdj[10,3],boundsAdj[11,3],boundsAdj[12,3],boundsAdj[13,3],boundsAdj[14,3])
)
boundsAdj
dev.off()
boxLabels = c("zn", "indus", "chas", "nox", "rm", "age", "dis", "rad", "tax", "ptratio", "black", "lstat", "medv")
yAxis = length(boxLabels):1
df <- data.frame(
yAxis = length(boxLabels):1,
boxOdds = c(boundsBac[2,1],boundsBac[3,1],boundsBac[4,1],boundsBac[5,1],boundsBac[6,1],boundsBac[7,1],boundsBac[8,1],boundsBac[9,1],boundsBac[10,1],boundsBac[11,1],boundsBac[12,1],boundsBac[13,1],boundsBac[14,1]),
boxCILow = c(boundsBac[2,2],boundsBac[3,2],boundsBac[4,2],boundsBac[5,2],boundsBac[6,2],boundsBac[7,2],boundsBac[8,2],boundsBac[9,2],boundsBac[10,2],boundsBac[11,2],boundsBac[12,2],boundsBac[13,2],boundsBac[14,2]),
boxCIHigh = c(boundsBac[2,3],boundsBac[3,3],boundsBac[4,3],boundsBac[5,3],boundsBac[6,3],boundsBac[7,3],boundsBac[8,3],boundsBac[9,3],boundsBac[10,3],boundsBac[11,3],boundsBac[12,3],boundsBac[13,3],boundsBac[14,3])
)
forestPlot(df, boxLabels, yAxis, "Models")
forestPlot <- function(df, boxLabels, yAxis, modelTitle) {
#dev.off()
p <- ggplot(df, aes(x = boxOdds, y = yAxis))
p + geom_vline(aes(xintercept = 1), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = boxCIHigh, xmin = boxCILow), size = .5, height = .2, color = "gray50") +
geom_point(size = 3.5, color = "orange") +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(breaks = yAxis, labels = boxLabels) +
scale_x_continuous(breaks = seq(0,1,30) ) +
#coord_trans(x = "log10") +
ylab("") +
xlab("Odds ratio (log scale)") +
#annotate(geom = "text", y =1.1, x = 3.5, label ="Model p < 0.001\nPseudo R^2 = 0.10", size = 3.5, hjust = 0) +
ggtitle(modelTitle)
}
forestPlot(df, boxLabels, yAxis, "Models")
View(boundsBac)
forestPlot <- function(df, boxLabels, yAxis, modelTitle) {
#dev.off()
p <- ggplot(df, aes(x = boxOdds, y = yAxis))
p + geom_vline(aes(xintercept = 1), size = .25, linetype = "dashed") +
geom_errorbarh(aes(xmax = boxCIHigh, xmin = boxCILow), size = .5, height = .2, color = "gray50") +
geom_point(size = 3.5, color = "orange") +
theme_bw() +
theme(panel.grid.minor = element_blank()) +
scale_y_continuous(breaks = yAxis, labels = boxLabels) +
scale_x_continuous(breaks = seq(0,0.5,30) ) +
#coord_trans(x = "log10") +
ylab("") +
xlab("Odds ratio (log scale)") +
#annotate(geom = "text", y =1.1, x = 3.5, label ="Model p < 0.001\nPseudo R^2 = 0.10", size = 3.5, hjust = 0) +
ggtitle(modelTitle)
}
forestPlot(df, boxLabels, yAxis, "Models")
boundsBac<-boundsBac[!(boundsBac$OR > 10000),]
dev.off()
boxLabels = c("zn", "indus", "chas", "nox", "rm", "age", "dis", "rad", "tax", "ptratio", "black", "lstat", "medv")
yAxis = length(boxLabels):1
df <- data.frame(
yAxis = length(boxLabels):1,
boxOdds = c(boundsBac[2,1],boundsBac[3,1],boundsBac[4,1],boundsBac[5,1],boundsBac[6,1],boundsBac[7,1],boundsBac[8,1],boundsBac[9,1],boundsBac[10,1],boundsBac[11,1],boundsBac[12,1],boundsBac[13,1],boundsBac[14,1]),
boxCILow = c(boundsBac[2,2],boundsBac[3,2],boundsBac[4,2],boundsBac[5,2],boundsBac[6,2],boundsBac[7,2],boundsBac[8,2],boundsBac[9,2],boundsBac[10,2],boundsBac[11,2],boundsBac[12,2],boundsBac[13,2],boundsBac[14,2]),
boxCIHigh = c(boundsBac[2,3],boundsBac[3,3],boundsBac[4,3],boundsBac[5,3],boundsBac[6,3],boundsBac[7,3],boundsBac[8,3],boundsBac[9,3],boundsBac[10,3],boundsBac[11,3],boundsBac[12,3],boundsBac[13,3],boundsBac[14,3])
)
forestPlot(df, boxLabels, yAxis, "Models")
dev.off()
boxLabels = c("zn", "indus", "chas", "rm", "age", "dis", "rad", "tax", "ptratio", "black", "lstat", "medv")
yAxis = length(boxLabels):1
df <- data.frame(
yAxis = length(boxLabels):1,
boxOdds = c(boundsBac[2,1],boundsBac[3,1],boundsBac[4,1],boundsBac[5,1],boundsBac[6,1],boundsBac[7,1],boundsBac[8,1],boundsBac[9,1],boundsBac[10,1],boundsBac[11,1],boundsBac[12,1],boundsBac[13,1],boundsBac[14,1]),
boxCILow = c(boundsBac[2,2],boundsBac[3,2],boundsBac[4,2],boundsBac[5,2],boundsBac[6,2],boundsBac[7,2],boundsBac[8,2],boundsBac[9,2],boundsBac[10,2],boundsBac[11,2],boundsBac[12,2],boundsBac[13,2],boundsBac[14,2]),
boxCIHigh = c(boundsBac[2,3],boundsBac[3,3],boundsBac[4,3],boundsBac[5,3],boundsBac[6,3],boundsBac[7,3],boundsBac[8,3],boundsBac[9,3],boundsBac[10,3],boundsBac[11,3],boundsBac[12,3],boundsBac[13,3],boundsBac[14,3])
)
forestPlot(df, boxLabels, yAxis, "Models")
dev.off()
boxLabels = c("zn", "indus", "chas", "rm", "age", "dis", "rad", "tax", "ptratio", "black", "lstat", "medv")
yAxis = length(boxLabels):1
df <- data.frame(
yAxis = length(boxLabels):1,
boxOdds = c(boundsBac[2,1],boundsBac[3,1],boundsBac[4,1],boundsBac[5,1],boundsBac[6,1],boundsBac[7,1],boundsBac[8,1],boundsBac[9,1],boundsBac[10,1],boundsBac[11,1],boundsBac[12,1],boundsBac[13,1]),
boxCILow = c(boundsBac[2,2],boundsBac[3,2],boundsBac[4,2],boundsBac[5,2],boundsBac[6,2],boundsBac[7,2],boundsBac[8,2],boundsBac[9,2],boundsBac[10,2],boundsBac[11,2],boundsBac[12,2],boundsBac[13,2]),
boxCIHigh = c(boundsBac[2,3],boundsBac[3,3],boundsBac[4,3],boundsBac[5,3],boundsBac[6,3],boundsBac[7,3],boundsBac[8,3],boundsBac[9,3],boundsBac[10,3],boundsBac[11,3],boundsBac[12,3],boundsBac[13,3])
)
forestPlot(df, boxLabels, yAxis, "Models")
confusionMatrix(table(knn_pred, testLabels))
confusionMatrix(lr_pred_corr, testData$Class)
confusionMatrix(table(lr_pred_all, testData$Class))
library(ISLR)
library(caret)
library(car)
library(MASS)
set.seed(7)
data <- Boston
median_crim_rate <- median(data$crim)
classFromCrimRate <- function(x) {
if (x > median_crim_rate) return (1)
else return (0)
}
calculatedClass <- sapply(data$crim, classFromCrimRate)
data$Class <- calculatedClass
data$Class <- as.factor(data$Class)
data <- data[,-1]
nrow(data[data$Class == 1,])
TrainingDataIndex <- createDataPartition(data$Class, p=0.75, list=FALSE)
trainingData <- data[TrainingDataIndex,]
testData <- data[-TrainingDataIndex,]
trainingLabels <- trainingData$Class
testLabels <- testData$Class
testDataWithoutClass <- testData[,-14]
prop.table(table(trainingLabels))
nearZeroVariables <- nearZeroVar(trainingData, saveMetrics = TRUE)
correlations <- cor(trainingData[,-14])
highCorrelations <- findCorrelation(correlations, cutoff = 0.75)
trainingDataCorr <- trainingData[,-drop(c(4,9))]
testDataCorr <- testData[,-drop(c(4,9))]
testDataCorrWithoutClass <- testDataCorr[,-12]
lr_model_all <- train(Class~., data=trainingData,
method='glm', family=binomial(link='logit'),
preProcess=c('scale', 'center'))
lr_pred_all <- predict(lr_model_all, testData[,-14])
confusionMatrix(table(lr_pred_all, testData$Class))
58/63
LDA_model_all <- train(Class~., data=trainingData,
method='lda',
preProcess=c('scale', 'center'))
LDA_pred_all <- predict(LDA_model_all, testData[,-14])
confusionMatrix(LDA_pred_all, testData$Class)
60/63
60/74
58/62
confusionMatrix(lr_pred_all, testData$Class)
knnGrid <- expand.grid(.k=c(2))
knn_model_all <- train(x=trainingData[,-14], method='knn',
y=trainingData$Class,
preProcess=c('center', 'scale'),
tuneGrid = knnGrid)
confusionMatrix(knn_pred, testLabels)
knn_pred <- predict(knn_model_all, testData[,-14])
confusionMatrix(knn_pred, testLabels)
54/60
